/*
 * Generated by Bluespec Compiler (build 6a8cedf)
 * 
 * On Sat May 23 16:26:31 CST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTestbench_pipe.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTestbench_pipe::MODEL_mkTestbench_pipe()
{
  mkTestbench_pipe_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTestbench_pipe()
{
  MODEL_mkTestbench_pipe *model = new MODEL_mkTestbench_pipe();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTestbench_pipe &INST_top = *((MOD_mkTestbench_pipe *)(instance_ptr));
	 INST_top.DEF_b__h4939 = INST_top.INST_step.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_done = (INST_top.DEF_b__h4939) == 31u;
	 INST_top.DEF_WILL_FIRE_RL_done = INST_top.DEF_CAN_FIRE_RL_done;
	 INST_top.DEF_CAN_FIRE_RL_pipe = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_pipe = INST_top.DEF_CAN_FIRE_RL_pipe;
	 if (INST_top.DEF_WILL_FIRE_RL_done)
	   INST_top.RL_done();
	 if (INST_top.DEF_WILL_FIRE_RL_pipe)
	   INST_top.RL_pipe();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_regfile_flag.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_s1_reg_pc.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_step.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTestbench_pipe::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTestbench_pipe_instance = new MOD_mkTestbench_pipe(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTestbench_pipe_instance->set_clk_0)("CLK");
}
void MODEL_mkTestbench_pipe::destroy_model()
{
  delete mkTestbench_pipe_instance;
  mkTestbench_pipe_instance = NULL;
}
void MODEL_mkTestbench_pipe::reset_model(bool asserted)
{
  (mkTestbench_pipe_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTestbench_pipe::get_instance()
{
  return mkTestbench_pipe_instance;
}

/* Fill in version numbers */
void MODEL_mkTestbench_pipe::get_version(unsigned int *year,
					 unsigned int *month,
					 char const **annotation,
					 char const **build)
{
  *year = 0u;
  *month = 0u;
  *annotation = NULL;
  *build = "6a8cedf";
}

/* Get the model creation time */
time_t MODEL_mkTestbench_pipe::get_creation_time()
{
  
  /* Sat May 23 08:26:31 UTC 2020 */
  return 1590222391llu;
}

/* State dumping function */
void MODEL_mkTestbench_pipe::dump_state()
{
  (mkTestbench_pipe_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTestbench_pipe & mkTestbench_pipe_backing(tSimStateHdl simHdl)
{
  static MOD_mkTestbench_pipe *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTestbench_pipe(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTestbench_pipe::dump_VCD_defs()
{
  (mkTestbench_pipe_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTestbench_pipe::dump_VCD(tVCDDumpType dt)
{
  (mkTestbench_pipe_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTestbench_pipe_backing(sim_hdl));
}
