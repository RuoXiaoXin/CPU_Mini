/*
 * Generated by Bluespec Compiler (build 6a8cedf)
 * 
 * On Thu May  7 13:38:37 CST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench_regfile.h"


/* Constructor */
MOD_mkTestbench_regfile::MOD_mkTestbench_regfile(tSimStateHdl simHdl,
						 char const *name,
						 Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_c(simHdl, "c", this, 32u, 0u, (tUInt8)0u),
    INST_dut0(simHdl, "dut0", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench_regfile::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h136", SYM_DEF, &DEF_b__h136, 32u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_show", SYM_DEF, &DEF_CAN_FIRE_RL_show, 1u);
  init_symbol(&symbols[2u], "c", SYM_MODULE, &INST_c);
  init_symbol(&symbols[3u], "dut0", SYM_MODULE, &INST_dut0);
  init_symbol(&symbols[4u], "RL_show", SYM_RULE);
  init_symbol(&symbols[5u], "WILL_FIRE_RL_show", SYM_DEF, &DEF_WILL_FIRE_RL_show, 1u);
}


/* Rule actions */

void MOD_mkTestbench_regfile::RL_show()
{
  tUInt32 DEF_c_PLUS_1___d5;
  tUInt32 DEF_x__h166;
  tUInt32 DEF_x__h196;
  DEF_b__h136 = INST_c.METH_read();
  DEF_x__h196 = INST_dut0.METH_read_rs2((tUInt8)2u);
  DEF_x__h166 = INST_dut0.METH_read_rs1((tUInt8)1u);
  DEF_c_PLUS_1___d5 = DEF_b__h136 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "32", DEF_x__h166);
    dollar_display(sim_hdl, this, "32", DEF_x__h196);
  }
  INST_c.METH_write(DEF_c_PLUS_1___d5);
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench_regfile::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_dut0.reset_RST_N(ARG_rst_in);
  INST_c.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench_regfile::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench_regfile::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_c.dump_state(indent + 2u);
  INST_dut0.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench_regfile::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_show", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_show", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h136", 32u);
  num = INST_c.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut0.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench_regfile::dump_VCD(tVCDDumpType dt,
				       unsigned int levels,
				       MOD_mkTestbench_regfile &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTestbench_regfile::vcd_defs(tVCDDumpType dt, MOD_mkTestbench_regfile &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_show) != DEF_CAN_FIRE_RL_show)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_show, 1u);
	backing.DEF_CAN_FIRE_RL_show = DEF_CAN_FIRE_RL_show;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_show) != DEF_WILL_FIRE_RL_show)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_show, 1u);
	backing.DEF_WILL_FIRE_RL_show = DEF_WILL_FIRE_RL_show;
      }
      ++num;
      if ((backing.DEF_b__h136) != DEF_b__h136)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h136, 32u);
	backing.DEF_b__h136 = DEF_b__h136;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_show, 1u);
      backing.DEF_CAN_FIRE_RL_show = DEF_CAN_FIRE_RL_show;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_show, 1u);
      backing.DEF_WILL_FIRE_RL_show = DEF_WILL_FIRE_RL_show;
      vcd_write_val(sim_hdl, num++, DEF_b__h136, 32u);
      backing.DEF_b__h136 = DEF_b__h136;
    }
}

void MOD_mkTestbench_regfile::vcd_prims(tVCDDumpType dt, MOD_mkTestbench_regfile &backing)
{
  INST_c.dump_VCD(dt, backing.INST_c);
}

void MOD_mkTestbench_regfile::vcd_submodules(tVCDDumpType dt,
					     unsigned int levels,
					     MOD_mkTestbench_regfile &backing)
{
  INST_dut0.dump_VCD(dt, levels, backing.INST_dut0);
}
